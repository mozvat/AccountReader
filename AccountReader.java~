import java.io.*;
import java.util.*;

class AccountReader {
	
	/**
	 *	AccountReader will asses the montly fees of Bank Customers
	 *	<p>
	 * 	Four functions are called.
	 *	Function 1: ReadFile(ArrayList<Accounts>, String filePath)
	 * 	Function 2: PopulateAccounts(ArrayList<Accounts>)
	 *  Function 3: CalculateFees(ArrayList<Accounts>)
	 * 	Function 4: DisplayCompleteAccountsInfo(ArrayList<Accounts>) 
	 *	@param  String[] args | path file name of the accounts file. Each param can contain a different file path.
	 *  @return void
	 */
	public static void main(String[] args) {
		
		ArrayList<String> files = new ArrayList<String>();
		String filePath = "AcctInfo.txt";
		System.out.println("Account Reader: Initializing");
		
		for (int ctr = 0; ctr < args.length; ctr++) {
        	files.add(args[ctr]); 
		}
				
		if( files.size() == 0){
			files.add("AccountInfo.txt");
		}

		for (int ctr = 0; ctr < files.size(); ctr++) {
        //This program consists of 4 main functions: ReadFile, PopulateAccounts, CalculateFees, and DisplayCompleteAccountsInfo
        ArrayList<String> tempAccounts = AccountReader.ReadFile(files.get(ctr));
        ArrayList<Account> accounts = AccountReader.PopulateAccounts(tempAccounts);
        //accounts  = AccountReader.CalculateFees(accounts);
        //AccountReader.DisplayCompleteAccountsInfo(accounts);	 
		}		
        
    	System.out.println("Account Reader: Closing"); 
    }
    
	/**
	 *	Reads a file and populates the Account class array list from a properly formated file 
	 *	<p>
	 * 	Account File Format:
	 *	Line: 1 Account Number
     *	Line: 2 Account Type | {Savings, Checking}
     *	Line: 3 Customer Name 
	 *	Line: 4 Customer Type | {Value, Advantage, Premier}
	 *	Line: 5 Account Balance
	 *  Line: 6 <Blank Line>	 
	 *  @param  The name and file path of the account information.
	 *  @return Returns an ArrayList of class Account.
	 *  @see    ArrayList<T>
	 */      
    public static ArrayList<String> ReadFile(String filePath){
    	System.out.println("Account Reader: Reading File " + filePath);
        ArrayList<String> fileLines = new ArrayList<String>();    	
    	try {
    		BufferedReader input = new BufferedReader(new FileReader(filePath));
        	try {        		
        		String line = null;     
        		// Parse the data from the file into an ArrayList of Strings
				while (( line = input.readLine()) != null){
					fileLines.add(line);
        		}
        	}
        	finally {
        		input.close();
        	}
        }
        catch (FileNotFoundException ex){
        	System.out.println("File Missing from Executable Path");
        }
        catch (IOException ex){
        	ex.printStackTrace();
        }

    	return fileLines;
    }
    

    private static ArrayList<Account> PopulateAccounts(ArrayList<String> tempAccounts){
    	
    	/** You could probably do some crazy recursion here with PopulateAccounts() and PopulateAccount(), but I didn't want to think that hard
    	and, recursion is actually hard to read while troubleshooting. I would rather be more
    	verbose and have an extra method. */
    	
    	//File Format: Account informaiton is line deliminated 
    	//Line: 1 Account Number
    	//Line: 2 Account Type : Savings, Checking
    	//Line: 3 Customer Name : Alpha Numeric
		//Line: 4 Customer Type : Value, Advantage, Premier
		//Line: 5 Account Balance  
		
		//A line of length of 0 is an account deliminator
		//if( line.length() == 0){
		//	break;
		//}
		
		System.out.println("Account Reader: Populating Account Data");
    	
		ArrayList<Account> accounts = new ArrayList<Account>();
    	int numberOfAccounts = (tempAccounts.size()-1) / 6;
    	for(int ctr = 0; ctr<tempAccounts.size(); ctr++){
			ArrayList<String> tempAccount = new ArrayList<String>();
			tempAccount.add(tempAccounts.get(ctr));
			
			if(tempAccounts.get(ctr).length() == 0){
				accounts.add(AccountReader.PopulateAccount(tempAccount));
				tempAccount = new ArrayList<String>();
			}
		}
			
		System.out.println(accounts.size());
    	return accounts;
    }
   
    private static Account PopulateAccount(ArrayList<String> tempAccount){
    	Account account = new Account();
    	for(int ctr = 0; ctr<tempAccount.size(); ctr++){
    		switch (ctr) {
            case 0:
            	account.setAccountNumber(tempAccount.get(ctr));
                break;
            case 1:
            	account.setAccountType(tempAccount.get(ctr));
                break;                      
            case 2: 
            	account.setCustomerName(tempAccount.get(ctr));
            	break;
            case 3:
            	account.setCustomerType(tempAccount.get(ctr));
                break;
            case 4:
            	account.setAccountBalance(tempAccount.get(ctr));
                break;            	
            default:
                System.out.println("Error");
                break;
            }
        }
    	
    	return account;
    }
    
    private static ArrayList<Account> CalculateFees(ArrayList<Account> accounts){
    	System.out.println("Account Reader: Calculating Fees");
        return accounts;
    }
    
    private static void DisplayCompleteAccountsInfo(ArrayList<Account> accounts){
    	System.out.println("Account Reader: Displaying All Accounts Info");
    }
    
    
    
}

